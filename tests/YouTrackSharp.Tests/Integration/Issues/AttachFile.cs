using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using Xunit;
using YouTrackSharp.Issues;
using YouTrackSharp.Tests.Infrastructure;

namespace YouTrackSharp.Tests.Integration.Issues
{
    public partial class IssuesServiceTests
    {
        public class AttachFileToIssue
        {
            [Fact]
            public async Task Valid_Connection_Attaches_Single_File_To_Issue()
            {
                // Arrange
                var connection = Connections.Demo1Token;
                var service = connection.CreateIssueService();
                
                var issue = new Issue
                {
                    Summary = "Test issue - " + DateTime.UtcNow.ToString("U"),
                    Description = "This is a test issue created while running unit tests."
                };
                
                issue.SetField("State", "Fixed");
                
                var issueId = await service.CreateIssue("DP1", issue);
                
                // Act & Assert
                using (var attachmentStream = await GenerateAttachmentStream("Generated by unit test."))
                {
                    await service.AttachFileToIssue(issueId, "singlefile.txt", attachmentStream);
                }
            }
            
            [Fact]
            public async Task Invalid_Connection_Throws_UnauthorizedConnectionException()
            {
                // Arrange
                var service = Connections.UnauthorizedConnection.CreateIssueService();
                
                // Act & Assert
                await Assert.ThrowsAsync<UnauthorizedConnectionException>(
                    async () => await service.GetIssue("NOT-EXIST"));
            }

            protected static async Task<Stream> GenerateAttachmentStream(string contents)
            {
                var stream = new MemoryStream();
                using (var streamWriter = new StreamWriter(stream, Encoding.UTF8, 4096, leaveOpen: true))
                {
                    await streamWriter.WriteAsync(contents);
                }

                stream.Position = 0;

                return stream;
            }
        }
    }
}